
2.)

	a.)

	A = Amy is a truth-teller
	B = Bob is a truth-teller
	C = Cal is a truth-teller

	KB
	A <=> (C ^ A)
	B <=> ~C
	C <=> (B v ~A)

	b.)

	A <=> (C ^ A) means A=>(C ^ A) and (C ^ A) => A

	A => (C ^ A)
	~A v (C ^ A)
	(~A v C) ^ (~A ^ A)
	(~A v C)
	clause 1: ~A v C

	(C ^ A) => A
	~(C ^ A) v A
	~C v ~A v A
	always true

	B <=> ~C means B => ~C and ~C => B

	B => ~C
	~B v ~C
	clause 2: ~B v ~C

	~C => B
	C v B
	clause 3: C v B

	C <=> (B v ~A) means C => (B v ~A) and (B v ~A) => C

	C => (B v ~A)
	~C v B v ~A 

	clause 4: ~C v B v ~A

	(B v ~A) => C
	~(B v ~A) v C
	(~B ^ A) v C
	(~B v C) ^(A v C)
	
	clause 5: ~B v C
	clause 6: A v C

	c.)

	KB:  1.) ~A v C, 2.) ~B v ~C, 3.)C v B, 4.)~C v B v ~A, 5.)~B v C, 6.)A v C
	7.) ~A v ~C (from 2 and 4)
	8.) ~A (from 1 and 7)
	9.) Introduce A into knowledge base
	10.) {} (from 9 and 8)
	11.) We arrive at a contradiction, so ~A: Amy is a liar.

	12.) ~B (from 2 and 5)
	13.) Introduce B into knowledge base
	14.) {} (from 13 and 12)
	15.) We arrive at a contradiction, so ~B: Bob is a liar.

	16.) C (from 1 and 6)
	17.) Introduce ~C into knowledge base
	18.) {} (from 17 and 16)
	19.) We arrive at a contradiction, so C: Cal is a truth-teller.

	d.)
	This is what I put in SAT Solver's main.

	// Start of code
	int[][] clauses = {{-1, 3}, {-2, -3}, {3, 2}, {-3, 2,-1}, {-2, 3}, {1,3}}; 
       

	SATSolver s = new SATSolver();
	for (int i = 0; i < clauses.length; i++)
	s.addClause(clauses[i]);
	System.out.println("Knowledge base is satisfiable: " + s.makeQuery());
	
	// Tests if it's true
	System.out.print("Is Amy a liar? ");
	int result = s.testLiteral(-1);
	if (result == FALSE)
	System.out.println("No.");
	else if (result == TRUE)
	System.out.println("Yes.");
	else
	System.out.println("Unknown."); 

	System.out.print("Is Bob a liar? ");
	result = s.testLiteral(-2);
	if (result == FALSE)
	System.out.println("No.");
	else if (result == TRUE)
	System.out.println("Yes.");
	else
	System.out.println("Unknown.");

	System.out.print("Is Cal a truthteller? ");
	result = s.testLiteral(3);
	if (result == FALSE)
	System.out.println("No.");
	else if (result == TRUE)
	System.out.println("Yes.");
	else
	System.out.println("Unknown."); 

	// Tests the opposite
	System.out.print("Is Amy a truth-teller? ");
	result = s.testLiteral(1);
	if (result == FALSE)
	System.out.println("No.");
	else if (result == TRUE)
	System.out.println("Yes.");
	else
	System.out.println("Unknown."); 

	System.out.print("Is Bob a truth-teller? ");
	result = s.testLiteral(2);
	if (result == FALSE)
	System.out.println("No.");
	else if (result == TRUE)
	System.out.println("Yes.");
	else
	System.out.println("Unknown."); 

	System.out.print("Is Cal a liar? ");
	result = s.testLiteral(-3);
	if (result == FALSE)
	System.out.println("No.");
	else if (result == TRUE)
	System.out.println("Yes.");
	else
	System.out.println("Unknown."); 
	//End of code 

	Results from command line

	"
	Knowledge base is satisfiable: true
	Is Amy a liar? Yes.
	Is Bob a liar? Yes.
	Is Cal a truthteller? Yes.
	Is Amy a truth-teller? No.
	Is Bob a truth-teller? No.
	Is Cal a liar? No.
	
	"